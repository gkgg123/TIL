### 파이프 옮기기는 파이썬으로 풀지말자...###
### 동적 계획법을 찾아서 풀었다.
### 동적계획법을 하기 위해선 모든 경우의 수를 계산해서 dp에 저장해 주었다.
### dp는 지금 총 3가지의 상태일수 있는 가로,세로,대각선 모양으로 파이프가 설수 있으므로
### 3차원 배열을 해주었고
### 각각 0,1,2에 가로모양,세로모양,대각선 모양으로 배정해주었다.

N=int(input())
arr=[list(map(int,input().split())) for _ in range(N)]

dp= [[[0]*3 for i in range(N)] for j in range(N)]

dp[0][1][0]=1
for j in range(2,N):
    if arr[0][j]==0:
        dp[0][j][0]=dp[0][j-1][0]
### 이 문제는 파이프가 한쪽 방향으로 갈수밖에 없고 처음 위치가 0,1로 고정되어있고, 가로 방향으로 주어져있어서 최초 위치
### dp[0][1][0]에 1을 해주었다.
### 그리고 0행에는 무조건 가로방향으로 가는 경우의 수밖에 없으므로, 벽으로 막혀있지만 않으면 이전 경우의 수를 대입해주었다. 

for i in range(1,N):
    for j in range(2,N):
        if arr[i][j]==0 and arr[i-1][j]==0 and arr[i][j-1]==0:
            dp[i][j][2]=dp[i-1][j-1][0]+dp[i-1][j-1][1]+dp[i-1][j-1][2]
            ### 이거는 대각선을 이동할때 추가해주는 것이다. 해당 문제에서 대각선으로 이동을 하면 무조건 나중 파이프 방향이 대각선 방향이 된다.
            ### 그래서 3번째 배열 index에 2를 넣어주었다.
            ### 그리고 대각선으로 이동하기 위해서는 총 3부위가 비어있어야하는데,
            ### 움직인 끝위치인 (i,j)와 (i-1,j) (i,j-1)가 비어있어야지만 대각선 이동이 가능하다.
            ### 이렇게 3가지 조건을 만족하면 i,j로 대각선 이동을 해서 올 수 있는 모든 경우의 수를 합해준다.
            ### 대각선이동은 파이프방향의 상관 없이 전부 올수 있으면 (i-1,j-1) 의 위치에서 올 수 있는 모든 경우의 수를 합해준다.
        if arr[i][j]==0:
            dp[i][j][0]=dp[i][j-1][0]+dp[i][j-1][2]
            dp[i][j][1]=dp[i-1][j][1]+dp[i-1][j][2]
            ### 이부분은 각각 가로 이동, 세로 이동일때 가능한 이동의 경우의 수를 세어준것이다.
            ### 가로방향으로 올수 있는 것은 이 전 파이프가 가로 방향일때와 대각선 방향일때 뿐이다.
            ### 세로 방향으로 올 수 있는 것은  전 파이프의 방향이 세로 방향일때와 대각선 방향일때 뿐이다.
            ### 각 경우의 수에 맞게 합해서 더해주었다.
print(sum(dp[N-1][N-1]))

### 그리고 최종적으로 (N-1,N-1)에 도착할 수 있는 모든 경우의 수를 합해서 출력해주면 된다.
### 이 풀이는 원래 숫자가 큰 17069번 파이프옮기기 2에서 써야하는 동적계획법인것 같다.
### 이 코드를 그대로 17069번에 제출해도 통과가 된다.